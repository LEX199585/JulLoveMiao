import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import LSTM, Dense
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# 历史周期数据
history_dates = [
    "2023-05-05", "2023-06-06", "2023-07-06", "2023-08-06",
    "2023-09-12", "2023-10-16", "2023-11-24", "2023-12-27",
    "2024-02-03", "2024-03-03", "2024-04-05", "2024-05-08"
]

# 将日期转换为天数间隔
history_dates = [datetime.strptime(date, "%Y-%m-%d") for date in history_dates]
period_intervals = [(history_dates[i] - history_dates[i - 1]).days for i in range(1, len(history_dates))]

# 准备数据
data = np.array(period_intervals)
data = data.reshape((len(data), 1))

# 标准化数据
mean = data.mean()
std = data.std()
normalized_data = (data - mean) / std

# 创建训练数据集
X, y = [], []
for i in range(len(normalized_data) - 1):
    X.append(normalized_data[i])
    y.append(normalized_data[i + 1])

X = np.array(X)
y = np.array(y)
X = X.reshape((X.shape[0], 1, X.shape[1]))

# 创建LSTM模型
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(1, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

# 训练模型
model.fit(X, y, epochs=300, verbose=0)

# 预测下一个周期的间隔天数
last_interval = normalized_data[-1].reshape((1, 1, 1))
predicted_interval = model.predict(last_interval)
predicted_interval = predicted_interval[0][0] * std + mean

# 输出预测结果
print(f"预测下一个周期的间隔天数: {predicted_interval:.2f}")

# 预测下一个周期的开始日期
last_date = history_dates[-1]
predicted_date = last_date + timedelta(days=predicted_interval)
print(f"预测下一个周期的开始日期: {predicted_date.strftime('%Y-%m-%d')}")

# 绘制历史周期记录及预测结果
plt.figure(figsize=(10, 5))
plt.plot(history_dates[1:], period_intervals, marker='o', label='历史周期间隔')
plt.axhline(y=predicted_interval, color='r', linestyle='--', label='预测周期间隔')
plt.xlabel('日期')
plt.ylabel('间隔天数')
plt.legend()
plt.title('历史周期间隔及预测结果')
plt.savefig('prediction_chart.png')
plt.show()
